/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.60
 * apibuilder:0.12.38 https://app.apibuilder.io/flow/localized-item-cache/0.3.60/play_2_x_standalone_json
 */
package io.flow.localized.item.cache.v0.models {

  /**
   * @param availableCountries List of ISO 3166-3 country codes available as defined
   * in https://api.flow.io/reference/countries
   */
  case class LocalizedItemCacheAvailableCountries(
    availableCountries: Seq[String]
  )

  /**
   * The actual object that should be cached for each local item
   */
  case class LocalizedItemCacheEntry(
    id: String,
    experience: io.flow.common.v0.models.ExperienceSummary,
    item: io.flow.common.v0.models.CatalogItemReference,
    pricing: io.flow.localized.item.cache.v0.models.LocalizedItemCachePricing,
    status: io.flow.catalog.v0.models.SubcatalogItemStatus
  )

  /**
   * Pricing information of a localized item
   * @param price Contains the item price localized to a particular experience
   * @param attributes Contains all attributes with intent price as keys of this map
   * - with each of those attributes mapped to its value in the local currency. For
   * example, if you have an attribute named 'msrp' and mark that attribute with
   * intent 'price', this map will have a key named 'msrp'
   */
  case class LocalizedItemCachePricing(
    price: io.flow.catalog.v0.models.LocalizedItemPrice,
    attributes: Map[String, io.flow.common.v0.models.PriceWithBase]
  )

  /**
   * Represents organization specific rates at a point in time
   */
  case class LocalizedItemCacheRates(
    rates: Seq[io.flow.currency.v0.models.Rate]
  )

}

package io.flow.localized.item.cache.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.catalog.v0.models.json._
    import io.flow.common.v0.models.json._
    import io.flow.currency.v0.models.json._
    import io.flow.localized.item.cache.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsLocalizedItemCacheLocalizedItemCacheAvailableCountries: play.api.libs.json.Reads[LocalizedItemCacheAvailableCountries] = {
      (__ \ "available_countries").read[Seq[String]].map { x => new LocalizedItemCacheAvailableCountries(availableCountries = x) }
    }

    def jsObjectLocalizedItemCacheAvailableCountries(obj: io.flow.localized.item.cache.v0.models.LocalizedItemCacheAvailableCountries): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "available_countries" -> play.api.libs.json.Json.toJson(obj.availableCountries)
      )
    }

    implicit def jsonWritesLocalizedItemCacheLocalizedItemCacheAvailableCountries: play.api.libs.json.Writes[LocalizedItemCacheAvailableCountries] = {
      new play.api.libs.json.Writes[io.flow.localized.item.cache.v0.models.LocalizedItemCacheAvailableCountries] {
        def writes(obj: io.flow.localized.item.cache.v0.models.LocalizedItemCacheAvailableCountries) = {
          jsObjectLocalizedItemCacheAvailableCountries(obj)
        }
      }
    }

    implicit def jsonReadsLocalizedItemCacheLocalizedItemCacheEntry: play.api.libs.json.Reads[LocalizedItemCacheEntry] = {
      (
        (__ \ "id").read[String] and
        (__ \ "experience").read[io.flow.common.v0.models.ExperienceSummary] and
        (__ \ "item").read[io.flow.common.v0.models.CatalogItemReference] and
        (__ \ "pricing").read[io.flow.localized.item.cache.v0.models.LocalizedItemCachePricing] and
        (__ \ "status").read[io.flow.catalog.v0.models.SubcatalogItemStatus]
      )(LocalizedItemCacheEntry.apply _)
    }

    def jsObjectLocalizedItemCacheEntry(obj: io.flow.localized.item.cache.v0.models.LocalizedItemCacheEntry): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "experience" -> io.flow.common.v0.models.json.jsObjectExperienceSummary(obj.experience),
        "item" -> io.flow.common.v0.models.json.jsObjectCatalogItemReference(obj.item),
        "pricing" -> jsObjectLocalizedItemCachePricing(obj.pricing),
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      )
    }

    implicit def jsonWritesLocalizedItemCacheLocalizedItemCacheEntry: play.api.libs.json.Writes[LocalizedItemCacheEntry] = {
      new play.api.libs.json.Writes[io.flow.localized.item.cache.v0.models.LocalizedItemCacheEntry] {
        def writes(obj: io.flow.localized.item.cache.v0.models.LocalizedItemCacheEntry) = {
          jsObjectLocalizedItemCacheEntry(obj)
        }
      }
    }

    implicit def jsonReadsLocalizedItemCacheLocalizedItemCachePricing: play.api.libs.json.Reads[LocalizedItemCachePricing] = {
      (
        (__ \ "price").read[io.flow.catalog.v0.models.LocalizedItemPrice] and
        (__ \ "attributes").read[Map[String, io.flow.common.v0.models.PriceWithBase]]
      )(LocalizedItemCachePricing.apply _)
    }

    def jsObjectLocalizedItemCachePricing(obj: io.flow.localized.item.cache.v0.models.LocalizedItemCachePricing): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "price" -> io.flow.catalog.v0.models.json.jsObjectLocalizedItemPrice(obj.price),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      )
    }

    implicit def jsonWritesLocalizedItemCacheLocalizedItemCachePricing: play.api.libs.json.Writes[LocalizedItemCachePricing] = {
      new play.api.libs.json.Writes[io.flow.localized.item.cache.v0.models.LocalizedItemCachePricing] {
        def writes(obj: io.flow.localized.item.cache.v0.models.LocalizedItemCachePricing) = {
          jsObjectLocalizedItemCachePricing(obj)
        }
      }
    }

    implicit def jsonReadsLocalizedItemCacheLocalizedItemCacheRates: play.api.libs.json.Reads[LocalizedItemCacheRates] = {
      (__ \ "rates").read[Seq[io.flow.currency.v0.models.Rate]].map { x => new LocalizedItemCacheRates(rates = x) }
    }

    def jsObjectLocalizedItemCacheRates(obj: io.flow.localized.item.cache.v0.models.LocalizedItemCacheRates): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "rates" -> play.api.libs.json.Json.toJson(obj.rates)
      )
    }

    implicit def jsonWritesLocalizedItemCacheLocalizedItemCacheRates: play.api.libs.json.Writes[LocalizedItemCacheRates] = {
      new play.api.libs.json.Writes[io.flow.localized.item.cache.v0.models.LocalizedItemCacheRates] {
        def writes(obj: io.flow.localized.item.cache.v0.models.LocalizedItemCacheRates) = {
          jsObjectLocalizedItemCacheRates(obj)
        }
      }
    }
  }
}

